{"ast":null,"code":"var _jsxFileName = \"/home/sarahkimball/Units/ReactJS/LightsoutGame/react-lights-out/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState } from \"react\";\nimport Board from \"./Board\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const boardSize = 5; // You can adjust the board size as per your preference\n\n  const [hasWon, setHasWon] = useState(false);\n  const handleCellClick = () => {\n    // Check for a win here (i.e., all lights are off)\n    // You can call the isBoardEmpty() function from the Board component to check if the board is empty\n    if (isBoardEmpty()) {\n      setHasWon(true);\n    }\n  };\n  const isBoardEmpty = () => {\n    // Implement this function to check if the board is empty (all lights off)\n    // You can get access to the Board component's functions and state using refs if needed\n    // Example: boardRef.current.isBoardEmpty()\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: hasWon ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"You Won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Board, {\n      boardSize: boardSize,\n      handleCellClick: handleCellClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"E7C3CUcUwNQHgMPQyA2krGmpuoc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Board","jsxDEV","_jsxDEV","App","_s","boardSize","hasWon","setHasWon","handleCellClick","isBoardEmpty","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/sarahkimball/Units/ReactJS/LightsoutGame/react-lights-out/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState } from \"react\";\nimport Board from \"./Board\";\n\nconst App = () => {\n  const boardSize = 5; // You can adjust the board size as per your preference\n\n  const [hasWon, setHasWon] = useState(false);\n\n  const handleCellClick = () => {\n    // Check for a win here (i.e., all lights are off)\n    // You can call the isBoardEmpty() function from the Board component to check if the board is empty\n    if (isBoardEmpty()) {\n      setHasWon(true);\n    }\n  };\n\n  const isBoardEmpty = () => {\n    // Implement this function to check if the board is empty (all lights off)\n    // You can get access to the Board component's functions and state using refs if needed\n    // Example: boardRef.current.isBoardEmpty()\n  };\n\n  return (\n    <div className=\"App\">\n      {hasWon ? (\n        <div>You Won!</div>\n      ) : (\n        <Board boardSize={boardSize} handleCellClick={handleCellClick} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAMC,SAAS,GAAG,CAAC,CAAC,CAAC;;EAErB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAMS,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACA;IACA,IAAIC,YAAY,CAAC,CAAC,EAAE;MAClBF,SAAS,CAAC,IAAI,CAAC;IACjB;EACF,CAAC;EAED,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA;IACA;EAAA,CACD;EAED,oBACEP,OAAA;IAAKQ,SAAS,EAAC,KAAK;IAAAC,QAAA,EACjBL,MAAM,gBACLJ,OAAA;MAAAS,QAAA,EAAK;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,gBAEnBb,OAAA,CAACF,KAAK;MAACK,SAAS,EAAEA,SAAU;MAACG,eAAe,EAAEA;IAAgB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EACjE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACX,EAAA,CA5BID,GAAG;AAAAa,EAAA,GAAHb,GAAG;AA8BT,eAAeA,GAAG;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}